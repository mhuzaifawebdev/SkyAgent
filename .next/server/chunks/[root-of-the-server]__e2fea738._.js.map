{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/HP/skyline-agent/src/lib/mongodb.js"],"sourcesContent":["// lib/mongodb.js\r\nimport { MongoClient } from 'mongodb';\r\n\r\nif (!process.env.MONGODB_URI) {\r\n  throw new Error('Invalid/Missing environment variable: \"MONGODB_URI\"');\r\n}\r\n\r\nconst uri = process.env.MONGODB_URI;\r\nconst options = {};\r\n\r\nlet client;\r\nlet clientPromise;\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n  // In development mode, use a global variable so that the value\r\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\r\n  let globalWithMongo = global;\r\n  \r\n  if (!globalWithMongo._mongoClientPromise) {\r\n    client = new MongoClient(uri, options);\r\n    globalWithMongo._mongoClientPromise = client.connect();\r\n  }\r\n  clientPromise = globalWithMongo._mongoClientPromise;\r\n} else {\r\n  // In production mode, it's best to not use a global variable.\r\n  client = new MongoClient(uri, options);\r\n  clientPromise = client.connect();\r\n}\r\n\r\n// Export a module-scoped MongoClient promise. By doing this in a\r\n// separate module, the client can be shared across functions.\r\nexport default clientPromise;"],"names":[],"mappings":"AAAA,iBAAiB;;;;AACjB;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;IAC5B,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,MAAM,UAAU,CAAC;AAEjB,IAAI;AACJ,IAAI;AAEJ,wCAA4C;IAC1C,+DAA+D;IAC/D,6EAA6E;IAC7E,IAAI;IAEJ,IAAI,CAAC,gBAAgB,mBAAmB,EAAE;QACxC,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;QAC9B,gBAAgB,mBAAmB,GAAG,OAAO,OAAO;IACtD;IACA,gBAAgB,gBAAgB,mBAAmB;AACrD;;uCAQe","debugId":null}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/HP/skyline-agent/src/app/api/todos/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport clientPromise from '@/lib/mongodb';\r\n\r\n// GET /api/todos - Fetch all todos\r\nexport async function GET() {\r\n  try {\r\n    const client = await clientPromise;\r\n    const db = client.db('todoApp');\r\n    const todos = await db.collection('todos').find({}).toArray();\r\n\r\n    return NextResponse.json(todos, { status: 200 });\r\n  } catch (error) {\r\n    return NextResponse.json({ error: error.message }, { status: 500 });\r\n  }\r\n}\r\n\r\n// POST /api/todos - Add a new todo\r\nexport async function POST(request) {\r\n  try {\r\n    const data = await request.json(); // Parse JSON body\r\n    const client = await clientPromise;\r\n    const db = client.db('todoApp');\r\n    const result = await db.collection('todos').insertOne(data);\r\n\r\n    return NextResponse.json(result, { status: 201 });\r\n  } catch (error) {\r\n    return NextResponse.json({ error: error.message }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,uHAAA,CAAA,UAAa;QAClC,MAAM,KAAK,OAAO,EAAE,CAAC;QACrB,MAAM,QAAQ,MAAM,GAAG,UAAU,CAAC,SAAS,IAAI,CAAC,CAAC,GAAG,OAAO;QAE3D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,OAAO;YAAE,QAAQ;QAAI;IAChD,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACnE;AACF;AAGO,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI,IAAI,kBAAkB;QACrD,MAAM,SAAS,MAAM,uHAAA,CAAA,UAAa;QAClC,MAAM,KAAK,OAAO,EAAE,CAAC;QACrB,MAAM,SAAS,MAAM,GAAG,UAAU,CAAC,SAAS,SAAS,CAAC;QAEtD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,QAAQ;YAAE,QAAQ;QAAI;IACjD,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACnE;AACF","debugId":null}}]
}